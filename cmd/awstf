#!/bin/bash
#--------------------------------------------------------------
# This script runs terraform command and create main_init.tf file.
# main_init.tf generates terraform backend block and provider(aws).
#
# if you want to run this script, need to add this following environment.
# - ENV
# - BUCKET
# - AWS_DEFAULT_REGION
# - IS_GENERATE_PROVIDER
#--------------------------------------------------------------
set -e

# usage function
function usage () {
    if [ -n "${1}" ]; then
        echo "error: $(basename "${0}") needs $1 environment parameter."
    fi
    cat <<EOF

This script runs terraform command and create main_init.tf file.
main_init.tf generates terraform backend block and provider(aws).

Usage:
    $(basename "${0}") {commands} [<options>]
    $(basename "${0}") plan
    $(basename "${0}") apply

Options:
    same terraform command options
EOF
    exit 1
}

# variables
# script directory
SCRIPT_DIR=$(cd "$(dirname "${0}")"; pwd)
# provider.json
PROVIDER_FILE=
BASE_PROVIDER_FILE="${SCRIPT_DIR}"/files/aws/provider.json
USER_PROVIDER_FILE=provider.json

# terraform command
COMMAND=$*
if [ $# -eq 0 ]; then
    usage
fi

# get provider.json
if [ -e "${USER_PROVIDER_FILE}" ]; then
    PROVIDER_FILE="${USER_PROVIDER_FILE}"
elif [ -e "${BASE_PROVIDER_FILE}" ]; then
    PROVIDER_FILE="${BASE_PROVIDER_FILE}"
else
    echo "can't find provider.json..."
    exit 1
fi
REQUIRED_VERSION=$(cat "${PROVIDER_FILE}" | jq -r .terraform.required_version)
BACKEND_S3_KEY=$(cat "${PROVIDER_FILE}" | jq -r .terraform.backend_s3.key)
AWS_VERSION=$(cat "${PROVIDER_FILE}" | jq -r .aws.version)

# get AWS Account ID
AWS_ID=$( \
    aws sts get-caller-identity \
    --query 'Account' \
    --output text
)
if [ -z "${AWS_ID}" ]; then
    usage "aws account id"
fi

# check environment
if [ -z "${ENV}" ]; then
    usage ENV
fi
if [ -z "${BUCKET}" ]; then
    usage BUCKET
fi
if [ -z "${AWS_DEFAULT_REGION}" ]; then
    usage AWS_DEFAULT_REGION
fi
if [ -z "${IS_GENERATE_PROVIDER}" ]; then
    usage IS_GENERATE_PROVIDER
fi

# export TF_LOG=1
# export TF_LOG_PATH='./terraform.log'
rm -f terraform.log crash.log main_init.tf
if [ "${IS_GENERATE_PROVIDER}" -eq "1" ]; then
    cp -p "${SCRIPT_DIR}"/files/aws/main.template.tf ./main_init.tf
    cat ./main_init.tf | sed -i -e "s/##REQUIRED_VERSION##/${REQUIRED_VERSION}/g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s/##S3_BUCKET##/${BUCKET}/g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s/##S3_KEY##/${BACKEND_S3_KEY}/g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s/##S3_REGION##/${AWS_DEFAULT_REGION}/g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s/##REGION##/${AWS_DEFAULT_REGION}/g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AWS_VERSION##@${AWS_VERSION}@g" ./main_init.tf
fi

terraform init
terraform ${COMMAND} -var-file=terraform."${ENV}".tfvars
